SQL - язык запросов,
для того чтобы создать запрос необходимо знать необходимые Предикаты, исходя из которых база данных выдаст результат, одно из самых важных
- SELECT и FROM, пример обычного запроса:
### SELECT * FROM Table ###
возмет все возможные данные из таблицы Table.

Для получения не всех столбцов, а каких-нибудь конкретных необходимо использовать
названия этих полей через запятую, вместо *:
### SELECT name, sirname FROM Table ### 
возмет столбцы name и sirname из Table.

Для получения данных по какому-то критерию, например цена продукта должна быть
больше 200, необходимо использовать WHERE price > 200:
### SELECT name, sirname, price ###
### FROM TABLE                  ###
### WHERE price > 200           ###

Для сортировки данных можно использовать предикат ORDER BY, а также два его доп. 
Предиката - DESC и ASC, DESK фильтрует по убываванию, ASC - по возростанию
(по умолчанию фильтрация принимает возрастающий вид)
### SELECT name, sirname ###
### FROM TABLE 		 ###
### ORDER BY name DESC	 ###
отсортирует данные по алфавиту от я до а.

Предикаты сортировки и фильтрации можно совмещать, создавая при этом нужные запросы.

Допустим мы используем агрегатные функции (4:AgregatFunctions).Если в предикате
SELECT используется хотя бы одна агрегатная функция, тогда и все остальные поля 
так же должны содержать агрегатную функцию, но что если мы не хотим использовать 
агрегатную функцию для поля name, тут нам пригодится предикат GROUP BY.
В конце запроса пишем GROUP BY и поле по которому будет групироваться предикат 
SELECT, получим:
### SELECT name, AVG(price) ###
### FROM Table		    ###
### GROUP BY name	    ###
При этом сортировка будет выглядеть как будто на нее наложили DISTINCT, так как для
каждой группы по name, будет лишь одна средняя цен

После группировки данных использование WHERE недоступно, при этом при возникает
необходимость для выбора только определенных данных. Собственно для этого 
используется предикат HAVING, функционал точно такой же как у WHERE, только 
фильтруется с учетом агрегатных функций.
### SELECT PC.hd	    ###
### FROM PC		    ###
### GROUP BY hd		    ###
### HAVING COUNT(code) >= 2 ###

